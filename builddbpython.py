import csv
import sqlite3

# Connect to the db. Creates a new one if it doesn't exist
conn = sqlite3.connect('Final_db')
c = conn.cursor()

# Creating all tables. Created in this order to make sure all referenced tables already exist when they are referenced as foreign keys.
c.execute('''CREATE TABLE IF NOT EXISTS Employee
    (employee_id INTEGER PRIMARY KEY, firstname VARCHAR(30) NOT NULL, surname VARCHAR(30) NOT NULL, email VARCHAR(30) NOT NULL)
''')

c.execute('''CREATE TABLE IF NOT EXISTS Programmes
    (programme_id INTEGER PRIMARY KEY, programme_name VARCHAR NOT NULL, required_academic_qualification VARCHAR NOT NULL, required_language_qualification VARCHAR NOT NULL, required_credits INTEGER NOT NULL, cost_per_credit REAL NOT NULL)
''')

c.execute('''CREATE TABLE IF NOT EXISTS Modules
    (module_id INTEGER PRIMARY KEY, module_name VARCHAR(20) NOT NULL, module_duration VARCHAR(20) NOT NULL, credits INTEGER NOT NULL, module_description VARCHAR(200) NOT NULL)
''')

c.execute('''CREATE TABLE IF NOT EXISTS Student
    (student_id INTEGER PRIMARY KEY, programme_id INTEGER NOT NULL, firstname VARCHAR(30) NOT NULL, surname VARCHAR(30) NOT NULL, dob DATE NOT NULL, email VARCHAR(30) NOT NULL, country_of_domicile VARCHAR, address VARCHAR NOT NULL, language_requirement VARCHAR, academic_qualification VARCHAR,
    FOREIGN KEY (programme_id) REFERENCES Programmes (programme_id))
''')

c.execute('''CREATE TABLE IF NOT EXISTS Class
    (class_id INTEGER PRIMARY KEY, module_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL,
    FOREIGN KEY (module_id) REFERENCES Modules (module_id),
    FOREIGN KEY (employee_id) REFERENCES Employee (employee_id))
''')

c.execute('''CREATE TABLE IF NOT EXISTS Module_Enrollment
    (class_id INTEGER, student_id INTEGER, final_grade REAL,
    PRIMARY KEY (class_id, student_id),
    FOREIGN KEY (class_id) REFERENCES Class (class_id),
    FOREIGN KEY (student_id) REFERENCES Student (student_id))
''')

c.execute('''CREATE TABLE IF NOT EXISTS Program_Modules
    (module_id INTEGER, programme_id INTEGER,
    PRIMARY KEY (module_id, programme_id),
    FOREIGN KEY (module_id) REFERENCES Modules (module_id),
    FOREIGN KEY (programme_id) REFERENCES Programmes (programme_id))
''')

c.execute('''CREATE TABLE IF NOT EXISTS Assessments
    (assessment_id INTEGER PRIMARY KEY, module_id INTEGER NOT NULL, assessment_type VARCHAR NOT NULL, assessment_weight REAL NOT NULL, assessment_description VARCHAR(200) NOT NULL,
    FOREIGN KEY (module_id) REFERENCES Modules (module_id))
''')

c.execute('''CREATE TABLE IF NOT EXISTS Teacher_Notes
    (note_id INTEGER PRIMARY KEY, class_id INTEGER NOT NULL, student_id INTEGER NOT NULL, note VARCHAR(200) NOT NULL,
    FOREIGN KEY (class_id) REFERENCES Class (class_id),
    FOREIGN KEY (student_id) REFERENCES Student (student_id))
''')

c.execute('''CREATE TABLE IF NOT EXISTS Grades
    (grade_id INTEGER PRIMARY KEY, class_id INTEGER NOT NULL, assessment_id INTEGER NOT NULL, student_id INTEGER NOT NULL, mark REAL NOT NULL,
    FOREIGN KEY (class_id) REFERENCES Class (class_id),
    FOREIGN KEY (assessment_id) REFERENCES Assessments (assessment_id),
    FOREIGN KEY (student_id) REFERENCES Student (student_id))
''')

# Load the csv's generated by ChatGPT and insert the data into the tables.

#Load Employee table
file = open('employee.csv')
contents = csv.reader(file)
add_employee = "INSERT INTO Employee (employee_id, firstname, surname, email) VALUES(?,?,?,?)"
c.executemany(add_employee, contents)

# Load Programmes table
file = open('programmes.csv')
contents = csv.reader(file)
add_programme = "INSERT INTO Programmes (programme_id, programme_name, required_academic_qualification, required_language_qualification, required_credits, cost_per_credit) VALUES(?,?,?,?,?,?)"
c.executemany(add_programme, contents)

# Load Modules table
file = open('modules.csv')
contents = csv.reader(file)
add_module = "INSERT INTO Modules (module_id, module_name, module_duration, credits, module_description) VALUES(?,?,?,?,?)"
c.executemany(add_module, contents)

#Load Student table
file = open('student.csv')
contents = csv.reader(file)
add_student = "INSERT INTO Student (student_id, programme_id, firstname, surname, dob, email, country_of_domicile, address, language_requirement, academic_qualification) VALUES(?,?,?,?,?,?,?,?,?,?)"
c.executemany(add_student, contents)

#Load Class table
file = open('class.csv')
contents = csv.reader(file)
add_class = "INSERT INTO Class (class_id, module_id, employee_id, start_date, end_date) VALUES(?,?,?,?,?)"
c.executemany(add_class, contents)

#Load Module_Enrollment table
file = open('module_enrollment.csv')
contents = csv.reader(file)
add_module_enrollment = "INSERT INTO Module_Enrollment (class_id, student_id, final_grade) VALUES(?,?,?)"
c.executemany(add_module_enrollment, contents)

#Load Program_Modules table
file = open('program_modules.csv')
contents = csv.reader(file)
add_program_module = "INSERT INTO Program_Modules (programme_id, module_id) VALUES(?,?)"
c.executemany(add_program_module, contents)

#Load Assessments table
file = open('assessments.csv')
contents = csv.reader(file)
add_assessment = "INSERT INTO Assessments (assessment_id, module_id, assessment_type, assessment_weight, assessment_description) VALUES(?,?,?,?,?)"
c.executemany(add_assessment, contents)

#Load Teacher_Notes table
file = open('teacher_notes.csv')
contents = csv.reader(file)
add_teacher_notes = "INSERT INTO Teacher_Notes (note_id, class_id, student_id, note) VALUES(?,?,?,?)"
c.executemany(add_teacher_notes, contents)

#Load Grades table
file = open('grades.csv')
contents = csv.reader(file)
add_grade = "INSERT INTO Grades (grade_id, class_id, assessment_id, student_id, mark) VALUES(?,?,?,?,?)"
c.executemany(add_grade, contents)


conn.commit()
conn.close()
